<?php
declare(strict_types=1);

namespace Tests\Variant\Controller;

use Ifrost\ApiBundle\Controller\ApiController;
use Ifrost\ApiBundle\Utility\ApiRequestInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Messenger\Handler\HandlersLocator;
use Symfony\Component\Messenger\MessageBus;
use Symfony\Component\Messenger\Middleware\HandleMessageMiddleware;
use Tests\Variant\Messenger\Command\SampleCommand;
use Tests\Variant\Messenger\Handler\SampleCommandHandler;
use Tests\Variant\Sample;
use Tests\Variant\Utility\ApiRequestVariant;

class ApiControllerVariant extends ApiController
{
    public function __construct(?Request $request = null)
    {
        $container = new Container();
        $container->set('ifrost_api.api_request', new ApiRequestVariant($request));
        $this->setContainer($container);
    }

    public function handle(object $message): void
    {
        parent::handle($message); // TODO: Change the autogenerated stub
    }

    public function getApiRequestService(): ApiRequestInterface
    {
        return parent::getApiRequestService();
    }

    public function getApiRequest(array $params, bool $allowNullable = true): array
    {
        return parent::getApiRequest($params, $allowNullable);
    }

    public function getFile(string $key): ?UploadedFile
    {
        return parent::getFile($key);
    }

    public function getRequiredFile(string $key): UploadedFile
    {
        return parent::getRequiredFile($key);
    }

    public function getField(string $key): mixed
    {
        return parent::getField($key);
    }

    public function getRequiredField(string $key): mixed
    {
        return parent::getRequiredField($key);
    }

    public function getContainer(): Container
    {
        return $this->container instanceof Container ? $this->container : new Container();
    }

    public function addMessageBusToContainer(): void
    {
        $bus = new MessageBus([
            new HandleMessageMiddleware(new HandlersLocator([
                SampleCommand::class => [new SampleCommandHandler()],
            ])),
        ]);
        $this->getContainer()->set('messenger.default_bus', $bus);
    }

    public function addInvalidMessageBusToContainer(): void
    {
        $this->getContainer()->set('messenger.default_bus', new Sample());
    }
}
